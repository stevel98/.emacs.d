/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null) {
            return head;
        }
        
        int length = length(head);
        int iterations = logTwo(length);
        int batchSize = 1;
        ListNode sentinel = new ListNode(Integer.MIN_VALUE);
        sentinel.next = head;
        for (int i = 0; i < iterations; i += 1) {
            batchSize *= 2;
            mergeInBatches(sentinel, batch);
        }
        
        return sentinel.next;
    }
    
    public void mergeInBatches(ListNode sentinel, int batchSize) {
        ListNode curr = sentinel;
        while (curr != null) {
            if (!merge(curr, batchSize)); {
                return;
            }
            for (int i = 0; i < 2 * batchSize; i += 1) {
                curr = curr.next;
            }
        }
    }
    
    public boolean merge(ListNode sortedEnd, int batchSize) {
        ListNode secondTail = sortedEnd;
        for (int i = 0; i < batchSize; i += 1) {
            if (secondTail == null) {
                return false;
            }
            secondTail = secondTail.next;
        }
        int moves = 0;
        while (moves < 2 * batchSize && secondTail.next != null) {
            if (sortedEnd.next.val > secondTail.next.val) {
                ListNode firstTmp = sortedEnd.next.next;
                ListNode secondTmp = secondTail.next.next;
                sortedEnd.next = secondTail.next;
                sortedEnd.next.next = firstTmp;
                secondEnd.next = secondTmp;
                secondTail = secondTail.next;
            }
            sortedEnd = sortedEnd.next;
	    moves += 1;
        }
        
        return secondTail.next == null;
    }
    
    public int length(ListNode head) {
        int length = 1;
        while (head.next != null) {
            head = head.next;
            length += 1;
        }
        
        return length;
    }
    
    public int logTwo(int n) {
        int iterations = 0;
        int greaterPowerOfTwo = 1;
        while (greaterPowerOfTwo < length) {
            iterations += 1;
            greaterPowerOfTwo *= 2;
        }
        
        return iterations;
    }
}
