class Solution {
    public String alienOrder(String[] words) {
        boolean[][] proceeds = new boolean[26][26];
        int maxLen = 0;
        List<Character> order = new ArrayList<Character>();
        for (String word : words) {
            maxLen = Math.max(maxLen, word.length());
        }
        
        boolean[] alreadySeen = new boolean[26];
        for (String word : words) {
            if (word.length() == 0) {
                continue;
            }
            int charIdx = words.get(0) - 'a';
            for (int i = 0; i < 26; i += 1) {
                if (alreadySeen[i] && i != charIdx) {
                    proceeds[charIdx][i] = true;
                }
            }
        }
        
        for (int i = 0; i < maxLen; i += 1) {
            char prefixChar = '!';
            int j = 0;
            alreadySeen = new boolean[26];
	    for (String word : words) {
		if (i >= word.length()) {
		    continue;
		} else if (i == 0 || word.charAt(i - 1) == prefixChar) {
		    int charIdx = word.charAt(i) - 'a';
		    for (int k = 0; k < 26; k += 1) {
			if (alreadySeen[k] && k != charIdx) {
			    proceeds[charIdx][k] = true;
			    if (proceeds[k][charIdx]) {
				return ""; // not lexicographically sorted
			    }
			}
		    }
		    
		}
	    }
        }
        
        
    }
}
